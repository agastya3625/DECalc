package com.backEnd;

import java.io.File;
import java.io.FilenameFilter;
import java.util.ArrayList;

import org.eclipse.swt.SWT;
import org.eclipse.swt.graphics.ImageData;
import org.eclipse.swt.graphics.Rectangle;

/**
 * This class holds all of the constants that are used throughout the program.
 * 
 * @version 1.0
 * @author Agastya Sharma July 14th, 2017
 */
public class Config {

	/**
	 * position of data file in command line array passed to DiffExCalc.java
	 */
	public static final int DATA_POS = 0;

	/**
	 * position of metadata file in command line array passed to DiffExCalc.java
	 */
	public static final int METADATA_POS = 1;

	/**
	 * position of results file in command line array passed to DiffExCalc.java
	 */
	public static final int RESULTS_POS = 2;

	/**
	 * R script to be executed
	 */
	public static String RFile_Name = "DESEQ_CORVERA_withoutLfcChange.R";

	/**
	 * DESeq2 manual, used to show user additional help.
	 */
	public static String MANUAL = "DESeq2.pdf";

	/**
	 * Help button message headers for data file
	 */
	public static String dataHelpHeader = "Data File";

	/**
	 * Help button message headers for metadata file
	 */
	public static String metadataHelpHeader = "Metadata File";

	/**
	 * Help button message headers for results file
	 */
	public static String resultsHelpHeader = "Results folder";

	/**
	 * Help button message for data file
	 */
	public static String dataHelpMessage = "Matrix input: \n\t single data matrix with trials as columns and genes as the rows(headers are also permitted). File must either be a .csv or .tsv file.\n\n Separate Files: \n\t folder with individual .tsv or .csv files for each trial (such as the files generated by RSEM).";

	/**
	 * Help button message for metadata file
	 */
	public static String metadataHelpMessage = "File input: \n\t See DESeq2 metadata file requirements in the DESeq2 manual under Help tab.\n\nMust have all trials as rows and information as columns. \n\n Folder input: \n\t folder containing only metadata files.";

	/**
	 * Help button message for results file
	 */
	public static String resultsHelpMessage = "This is the folder that files generated by this DESeq2 run will be placed.";

	/**
	 * Operating system type of the user (either windows or mac)
	 */
	public static String OS_TYPE;
	
	/**
	 * Sample data file
	 */
	public static String SAMPLE_DATA_FILE = "sample_data.csv";
	
	/**
	 * Sample metadata file
	 */
	public static String SAMPLE_METADATA_FILE = "sample_metadata.csv";

	/**
	 * location of the "Rscript" command that allows R to be executed from
	 * command line
	 */
	public static String R_COMMAND = "/usr/local/bin/Rscript";

	/**
	 * header "shebang" of every bash file created to run on mac
	 */
	public static final String MAC_BASH_HEAD = "#!/bin/bash";

	/**
	 * R version requirements of this app
	 */
	public static final String R_VERSION = "3.3.2";

	/**
	 * Java version requirements for this app
	 */
	public static final String JAVA_VERSION = "1.8.0_31";

	/**
	 * File filter to get rid of system files when using folders
	 */
	public static final FilenameFilter FileFilter = new FileFilterer();

	// Graphics constants

	/**
	 * SWT style requirements of the shell
	 */
	public static final int SHELL_STYLE = SWT.CLOSE | SWT.TITLE | SWT.MIN | SWT.H_SCROLL | SWT.V_SCROLL ;

	/**
	 * Style of information MessageBoxes in app
	 */
	public static int INFO_STYLE = SWT.ICON_INFORMATION | SWT.OK;

	/**
	 * Image icon file
	 */
	public static ImageData ICON = null;
	
	/**
	 * Image icon file
	 */
	public static final String ICON_FILE = "icons.png";

	/**
	 * Image icon file
	 */
	public static ImageData BKGD = null;

	/**
	 * Image icon file
	 */
	public static final String BKGD_FILE = "startup.jpg";

	/**
	 * R script that gets the current R version to ensure that the program is runnable. 
	 */
	public static String VERS = "getVersion.R";

	/**
	 * directory that stores all resources needed by the GUI
	 */
	public static File TEMP_DIR;
	
	/**
	 * width of the main application window
	 */
	public static int SHELL_WIDTH;

	/**
	 * height of the main application window
	 */
	public static int SHELL_HEIGHT;
	
	/**
	 * standard height of textboxes
	 */
	public static int textHt = 20; // height of all text

	/**
	 * standard textbox width
	 */
	public static int textWt = 250;
	
	/**
	 * standard button width
	 */
	public static int BUTTON_WIDTH = 150;
	
	/**
	 * standard margin
	 */
	public static int MARGIN = 25;
	
	/**
	 * defines a rectangle in the right bottom corner of the window that is a template for placing buttons. 
	 */
	public static Rectangle RIGHT_CORNER = new Rectangle(Config.SHELL_WIDTH - Config.BUTTON_WIDTH - 15, Config.SHELL_HEIGHT - Config.textHt - 35,
				Config.BUTTON_WIDTH, Config.textHt);
	
	/**
	 * defines a rectangle in the left bottom corner of the window that is a template for placing buttons. 
	 */
	public static Rectangle LEFT_CORNER = new Rectangle(25, Config.SHELL_HEIGHT - Config.textHt - 35, Config.BUTTON_WIDTH, Config.textHt);

	/**
	 * defines a rectangle in the left top corner of the window that is a template for placing buttons. 
	 */
	public static Rectangle TOP_LEFT_CORNER = new Rectangle(25, 25, Config.BUTTON_WIDTH, Config.textHt);

	/**
	 * progress bar to monitor the run progress 
	 */
	public static Rectangle PROGRESS_BAR = new Rectangle(Config.SHELL_WIDTH - 568, 30, 500, 20);
	
	/**
	 * shows the current task being executed
	 */
	public static Rectangle PROGRESS_LABEL = new Rectangle(Config.SHELL_WIDTH - 558, 60, 200, 20);
	
	/**
	 * message shown to user on startup
	 */
	public static String aboutMessage = "Version: 1.0\nRelease: Jule 14th, 2017\nAuthor: Agastya Sharma\n\nDECalc is a java swt-based GUI allows users to easily run DESeq2 for their data sets.\n\nNuts and Bolts:\n\tR and DESeq2:"
			+ "\n\t\tUnderneath the GUI, DECalc runs an R script. To see this script, go to Show -> R script. \n\t\tThis R script was created to take in command line arguments and runs a DESeq2 test based \n\t\ton a two-variable design formula. \n\t\tTo see a sample two-variable data set and associated metadata, \n\t\tgo to Help -> Sample data file or Help -> Sample metadata file. \n\t\tTo learn more about how DESeq2 works, the manual is under Help -> DESeq2 Manual. It is \n\t\tadvised to read through the manual before uploading any custom R scripts, as this can \n\t\tchange how the GUI runs. If using more than two variables in the design formula, it is \n\t\tIMPERATIVE that you use a custom R script, or edit the R script's provided design formula \n\t\tto accomodate these new variables. \n\n\t\tCAUTION: Using a custom script may affect the performance of the GUI. \n\n\tJava:\n\t\tThe GUI is built under Java 8, and uses the SWT toolkit to provide the graphics. \n\t\tSource code and documentation can be found at this URL: ";
	
	/**
	 * user preferences file 
	 */
	public static String prefs = "prefs.txt";

	
	
	/**
	 * This method resizes all GUI elements to fit the screen that they are on. 
	 * 
	 * @param newWidth: width of new display monitor
	 * 
	 * @param newHeight: height of new display monitor
	 * 
	 */
	public static void ResizeAll(int newWidth, int newHeight){
		Config.SHELL_HEIGHT = newHeight;
		Config.SHELL_WIDTH = newWidth;
		Config.PROGRESS_LABEL = new Rectangle(Config.SHELL_WIDTH - 558, 60, 600, 20);
		Config.RIGHT_CORNER = new Rectangle(Config.SHELL_WIDTH - Config.BUTTON_WIDTH - 15, Config.SHELL_HEIGHT - Config.textHt - 35,
				Config.BUTTON_WIDTH, Config.textHt);
		Config.LEFT_CORNER = new Rectangle(25, Config.SHELL_HEIGHT - Config.textHt - 35, Config.BUTTON_WIDTH, Config.textHt);
		Config.PROGRESS_BAR = new Rectangle(Config.SHELL_WIDTH - 568, 30, 500, 50);
		if(System.getProperty("os.name").toLowerCase().contains("win")){
			Config.RIGHT_CORNER = new Rectangle(Config.SHELL_WIDTH - Config.BUTTON_WIDTH - 15, Config.SHELL_HEIGHT - Config.textHt - 55,
					Config.BUTTON_WIDTH, Config.textHt);
			Config.LEFT_CORNER = new Rectangle(25, Config.SHELL_HEIGHT - Config.textHt - 55, Config.BUTTON_WIDTH, Config.textHt);
		}
	}
	

	/**
	 * This method verifies the java version by splitting the String into
	 * numbers and comparing them individually to determine if this program can
	 * be run using the user's current Java installment.
	 * 
	 * @param property:
	 *            version to compare to the one stored in Config
	 * 
	 * @return true if the version can be used, fales if it cannot.
	 */
	public static boolean verifyJavaVersion(String property) {
		if (property.equals(JAVA_VERSION)) {
			return true;
		}
		// splits both Strings int comparable String[]s
		String[] propSplits = property.split("\\.");
		String[] versionSplits = JAVA_VERSION.split("\\.");
		for (int i = 0; i < propSplits.length - 1; i++) {
			if (Integer.parseInt(propSplits[i]) < Integer.parseInt(versionSplits[i])) {
				return false;
			}
		}
		// Handles the fact that Java version numbers are separated by "_",
		// compares the number on either side of the "_" to ensure a thorough
		// check of the Java version.
		String[] final_elementprop = propSplits[propSplits.length - 1].split("_");
		String[] final_elementversion = propSplits[propSplits.length - 1].split("_");
		for (int i = 0; i < final_elementprop.length - 1; i++) {
			if (Integer.parseInt(final_elementprop[i]) < Integer.parseInt(final_elementversion[i])) {
				return false;
			}
		}
		return true;
	}
	
	/**
	 * This method calculates the total number of elements in a 2D ArrayList.
	 * Example: if the ArrayList contains 3 other lists, each with 4 elements,
	 * this method return 12.
	 * 
	 * @param List2D:
	 *            List to get all elements from
	 * 
	 * @return int number of elements
	 * 
	 */
	public static int getSize(ArrayList<ArrayList<String>> List2D) {
		int toReturn = 0;
		for (int i = 0; i < List2D.size(); i++) {
			toReturn += List2D.get(i).size();
		}
		return toReturn;
	}
	
	
}
