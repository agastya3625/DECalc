library(debrowser)
startDEBrowser()
data_file <- "/Users/agastya/Desktop/Controls_expected_matrix.csv"
metadata_file <- "/Users/agastya/Desktop/metadata_controls.csv"
data <- tail(unlist(strsplit(metadata_file, split = "_", fixed = TRUE)), n=1)
comps <- "'AvsB'-'AvsC'-'AvsD'-'AvsE'-'AvsF'-'BvsC'-'BvsD'-'BvsE'-'BvsF'-'CvsD'-'CvsE'-'CvsF'-'DvsE'-'DvsF'-'EvsF'"
outfile <- "/Users/agastya/Desktop/Results-Control vs. control /"
data_file_name <- sub(".csv", "", data)
conts = strsplit("'A','B','C','D','E','F'", ",", fixed = TRUE)
levsType = unlist(conts)
message("=========================================================")
####### Make Data Frames #######
Count_Data <- read.csv(data_file)
counts <- data.frame(Count_Data, row.names = 1)
Meta_Data_all <- read.csv(metadata_file)
sampleNames <- data.frame(Meta_Data_all, row.names = 1)
#checks to see if the metadata file row names are the same as the data file column names
if (all(rownames(sampleNames) == colnames(counts)) == FALSE) {
message("ERROR: data matrix columns do not match metadata rows.")
stop()
}
####### Run analysis #######
dds <-
DESeq2::DESeqDataSetFromMatrix(
countData = counts,
colData = sampleNames,
design = Type
)
#making of the design formula
dds$Type <- factor(dds$Type, levels = levsType)
####### Run analysis #######
dds <-
DESeq2::DESeqDataSetFromMatrix(
countData = counts,
colData = sampleNames,
design = ~ Type
)
#making of the design formula
dds$Type <- factor(dds$Type, levels = levsType)
# dds$Treatment <-
#  factor(dds$Treatment, levels = levsTreatment)
# dds$Time <-
#   factor(dds$Treatment, levels = levsTime)
# dds$group <- factor(paste0(dds$Treatment, dds$Type, dds$Ti))
dds$group <- factor(dds$Type)
design(dds) <- ~ group
#runs normalization
ddsRES <- DESeq2::DESeq(dds)
####### Run analysis #######
dds <-
DESeq2::DESeqDataSetFromMatrix(
countData = counts,
colData = sampleNames,
design = ~ Type
)
#making of the design formula
dds$Type <- factor(dds$Type, levels = levsType)
# dds$Treatment <-
#  factor(dds$Treatment, levels = levsTreatment)
# dds$Time <-
#   factor(dds$Treatment, levels = levsTime)
# dds$group <- factor(paste0(dds$Treatment, dds$Type, dds$Ti))
dds$group <- factor(dds$Type)
design(dds) <- ~ Type
View(dds)
#runs normalization
ddsRES <- DESeq2::DESeq(dds)
